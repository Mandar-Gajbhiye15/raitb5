#hierarhical inheritance

class Parent:
    def func1(self):
        print("this is in parent class ")

class Child1(Parent):
    def func2(self):
        print("this is in child 1")

class Child2(Parent):
    def func3(self):
        print("this is in child 2")

c1=Child1()
c1.func1()
c1.func2()

c2=Child2()
c2.func1()
c2.func3()

#hybrid inheritance

class School:
    def func1(self):
        print("this is in school")

class Student1(School):
    def func2(self):
        print("this is in student1")

class Student2(School):
    def func3(self):
        print("this is in student 2")

class Student3(Student1,School):
    def func4(self):
        print("this is in student 3")

s3=Student3()
s3.func1()
s3.func2()
s3.func4()

s2=Student2()
s2.func1()
s2.func3()

#super function

class Animals:
    def __init__(self):
        self.legs=4
        self.domestic=True
        self.tail=True
        self.mammals=True

    def isMammal(self):
        if self.mammals:
            print("it is a mammal")

    def isDomestic(self):
        if self.domestic:
            print("it is domestic animal")

class Dog(Animals):
    def __init__(self):
        super().__init__()
    
    def isMammal(self):
        super().isMammal()
        

class Horse(Animals):
    def __init__(self):
        super().__init__()

    def tail_and_legs(self):
        if self.tail and self.legs==4:
            print("has a tail and 4 legs")

d=Dog()
d.isMammal()
d.isDomestic()

h=Horse()
h.tail_and_legs()
h.isDomestic()

#method overriding

class Parent:
    def func1(self):
        print("this is in parent")

class Child(Parent):
    def func1(self):
        print("this is in child")

c=Child()
c.func1()

p=Parent()
p.func1()
