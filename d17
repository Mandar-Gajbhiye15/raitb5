'''
Write a python program to solve a classic ancient Chinese puzzle.
We count 35 heads and 94 legs among the chickens and rabbits in a farm. 
How many rabbits and how many chickens do we have?

Sample Input	           Expected Output

heads-150 legs-400	         100   50
heads-3 legs-11	           No solution
heads-3 legs-12	              0     3
heads-5 legs-10	              5    0

'''

def solve(heads,legs):
    chicken_count=0
    rabbit_count=0
    if legs%2==0:
        rabbit_count=(legs//2)-heads
        chicken_count=heads-rabbit_count
        if rabbit_count<0 or chicken_count<0:
            print("no solution")
        else:
            print(chicken_count,rabbit_count)
    else:
        print("no solution")


solve(150,400)
solve(3,11)
solve(3,12)
solve(5,10)


#polymorphism
'''same function but used in different types'''
condidtion of occurrence in different forms refers to the use of single type entity to represent different types in different scenarios

print(len("python"))
print(len(["python","java","c"]))
print(len({"name":"python","language":"moderate"}))


num1=4
num2=5
print(num1+num2)

str1="python"
str2="language"
print(str1+" "+str2)


class Cat:
    def __init__(self,name,age):
        self.name=name
        self.age=age

    def info(self):
        print(f"I am cat.My name is {self.name}.I am {self.age} years old")

class Dog:
    def __init__(self,name,age):
        self.name=name
        self.age=age

    def info(self):
        print(f"I am dog.My name is {self.name}.I am {self.age} years old")

c=Cat("kitty",2)
d=Dog("brucy",4)

for animal in (c,d):
    animal.info()
    

#encapsulation

Describes the idea of  wrapping data and methods that works on data within one unit
It puts restructions on accessing the variables & methods & can prevent accidental modification

private: objct's variable can only be changed by an oject's method()

protected: calling protected members of base class

class Computer:
    def __init__(self):
        self.__maxprice=400

    def sell(self):
        print("selling price is {}".format(self.__maxprice))

    def set_maxprice(self,price):
        self.__maxprice=price

c=Computer()
c.sell()

c.__maxprice=500
c.sell()

c.set_maxprice(500)
c.sell()
