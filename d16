'''
Continuing with the previous scenario, a student eligible for admission has to choose a course and pay the fees for it. 
If they have scored more than 85 marks in qualifying exam, they get 25% discount on fees.
Valid course ids and fees are given below:
course id	  fees
1001	     25575.0
1002	     15500.0
Extend the program written in the previous assignment to include the above requirement.
Instance variables and methods to be included in Student class are given below.

Class name: Student
Attributes
(private)	         course_id
                      fees	 
Methods
(public)	
__init__()	                   Create and initialize newly created instance variables also to None
 	
choose_course(course_id)	  Accept the course_id chosen by the student.
                              •	If course_id is valid,
                            o	set attributes course_id and fees
                             o	if marks is more than 85, apply 25% discount on fees
                             o	return true
                            •	Else, return false

getter methods	Include getter methods for newly added instance variables
              
'''  
courses={1001:25575.0,1002:15500.0}
class Student:
    def __init__(self):
        self.__student_id=None
        self.__marks=None
        self.__age=None
        self.__course_id=None
        self.__fees=None

    def validate_marks(self):
        if self.__marks>=0 and self.__marks<=100:
            return True
        else:
            return False

    def validate_age(self):
        if self.__age>20:
            return True
        else:
            return False

    def check_qualification(self):
        if self.validate_age() and self.validate_marks():
            if self.__marks>=65:
                return True
            else:
                return False
        else:
            return False

    def choose_course(self,course_id):
        if course_id in courses.keys():
            self.__course_id=course_id
            if self.__marks>=85:
                self.__fees=courses[course_id]*0.75
                print("Fees: ",self.__fees)
                return True
            else:
                return False
        else:
            return False

    def set_student_id(self,student_id):
        self.__student_id=student_id

    def get_student_id(self):
        return self.__student_id

    def set_age(self,age):
        self.__age=age

    def get_age(self):
        return self.__age

    def set_marks(self,marks):
        self.__marks=marks

    def get_marks(self):
        return self.__marks

    def get_course_id(self):
        return self.__course_id

    def get_fees(self):
        return self.__fees

s=Student()
s.set_student_id(10)
s.set_age(24)
s.set_marks(85)
print(s.get_student_id())
print(s.get_age())
print(s.get_marks())
if s.check_qualification():
    print("student qualified for admission")
    if s.choose_course(1001):
        print("course is alloted")
    else:
        print("invalid course id")
else:
    print("not qualified")




'''
TechWorld, a technology training center, wants to allocate courses for instructors.
An instructor is identified by name, technology skills, experience and average feedback.
An instructor is allocated a course, if he/she satisfies the below two conditions:
•	eligibility criteria:
•	if experience is more than 3 years, average feedback should be 4.5 or more
•	if experience is 3 years or less, average feedback should be 4 or more
•	he/she should posses the technology skill for the course
Identify the class name and attributes from the list of options below to represent instructors.
•	check_eligibility()
•	avg_feedback
•	experience
•	instructor_name
•	allocate_course()
•	allocate_course(technolody)
•	__init__()
•	Instructor
•	calculate_avg_feedback()
•	technology_skill
Write a Python program to implement the class chosen with its attributes and methods.
Note:
1.	Consider all instance variables to be private and methods to be public
2.	An instructor may have multiple technology skills, so consider instance variable, technology_skill to be a list
3.	check_eligibility(): Return true if eligibility criteria is satisfied by the instructor. Else, return false
4.	allocate_course(technology): Return true if the course which requires the given technology can be allocated to the instructor. 
                             Else, return false
5.	Perform case sensitive string comparison
Represent few objects of the class, initialize instance variables using setter methods, invoke appropriate methods and test your program.

'''

class Instructor:
    def __init__(self):
        self.__instructor_name=None
        self.__experience=None
        self.__avg_feedback=None
        self.__technology_skill=None
        
    def set_instructor_name(self,instructor_name):
        self.__instructor_name=instructor_name
    
    def set_experience(self,experience):
        self.__experience=experience

    def set_avg_feedback(self,avg_feedback):
        self.__avg_feedback=avg_feedback

    def set_technology_skill(self,technology_skill):
        self.__technology_skill=technology_skill

    def get_instructor_name(self):
        return self.__instructor_name
    
    def get_experience(self):
        return self.__experience

    def get_avg_feedback(self):
        return self.__avg_feedback

    def get_technology_skill(self):
        return self.__technology_skill

    def check_eligibility(self):
        if self.__experience>3 and self.__avg_feedback>4.5:
            return True
        elif self.__experience<=3 and self.__avg_feedback>=4:
            return True
        else:
            return False

    def allocate_course(self,technology):
        if (technology in self.__technology_skill):
            return True
        else:
            return False

i=Instructor()
i.set_instructor_name("ABC")
i.set_experience(4)
i.set_avg_feedback(5)
i.set_technology_skill(["python","c++"])
print(i.check_eligibility())
print(i.allocate_course("python"))

'''
Write a python program to solve a classic ancient Chinese puzzle.
We count 35 heads and 94 legs among the chickens and rabbits in a farm. 
How many rabbits and how many chickens do we have?

Sample Input	           Expected Output

heads-150 legs-400	         100   50
heads-3 legs-11	           No solution
heads-3 legs-12	              0     3
heads-5 legs-10	              5    0


'''

